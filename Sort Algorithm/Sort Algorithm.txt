230210

팩토리얼(Factorial) => 3! = 3*2*1

[문제] 임의의 수(양의 정수)를 입력받아 입력 받은 수에 대한 팩토리얼을 구하시오(단, 반복문 사용)

<입력>
숫자 입력 => 4
<출력>
4! = 24

반복문으로 작성 후 재귀함수로 다시 작성한 코드
관련 파일 : SortEx01.java
-----------------------------------------------------------------------------

[문제2] 피보나치 수열을 구해서 출력하는 프로그램을 작성하시오.
<처리조건>
임의의 수를 입력하면 입력한 수만큼의 피보나치 수열을 구해서 출력한다.

<입력>
숫자 입력 => 5
<출력>
1 1 2 3 5

반복문으로 작성 후 재귀함수로 다시 작성한 코드
관련 파일 : FibonacciRecursive.java
-----------------------------------------------------------------------------

재귀(Recursive) 함수

실행속도는 반복문이 훨씬 빠름
스택은 운영체제가 관여해서 관리하기 때문

재귀구조가 메모리도 많이 사용함

반복문으로 구현할 수 없는것을, 힘든것을 재귀 구조로 가능하기 때문. 장점이 이거 딱 하나.
-----------------------------------------------------------------------------

230213

정렬 예제
관련 파일 : Ex11_1~4, sawon과 ArrayListSawon 은 선택정렬 활용 예제(출력 부분만 이름 정렬 관련으로 활용)

String 객체 비교할때 정렬하고싶다면
compareTo()
compareToIngnoreCase() : 대소문자 구분하지 않고 비교

- int compareTo(NumberSubClass referenceName)
- int compareTo(String anotherString)
- compareTo() 함수는 두개의 값을 비교하여 int 값으로 반환해주는 함수이다.
compareTo() 함수에는 위에서 설명하는바와 같이 "문자열의 비교" 와 "숫자의 비교" 두 방식이 존재한다.

1. 숫자 비교
숫자의 비교 같은 경우는 단순히 크다(1), 같다(0), 작다(-1) 의 관한 결과값을 리턴해주는 반면
문자열의 비교 같은 경우는 같다(0), 그 외 양수/음수값 같이 참 재미난 결과를 반환해준다.

기준 값과 비교대상이 동일한 값일 경우 0
기준 값이 비교대상 보다 작은 경우 -1
기준 값이 비교대상 보다 큰 경우 1
예제를 보면 타입을 Integer로 선언해 주었는데, 만약 int타입을 가지고 비교하고자 한다면 다음과 같이 사용하면 된다.

int x = 4;
int y = 5;
Integer.compare(x,y);
이런식으로 Integer.compare 메서드를 사용해주면 int타입을 가지고 비교할 수 있다.

2. 문자 비교
같으면 0 반환
다르면 다른 문자의 갯수만큼 리턴

1) 비교대상 문자열이 포함되어있을 경우 (비교대상문자열이 기준문자열에 완전히 포함되는 문자열이어야 함)
str.compareTo("abcd")

: 문자열이 일치하는 경우 숫자비교와 똑같이 0 리턴


String str = "abcd";

  // 1) 비교대상에 문자열이 포함되어있을 경우
  System.out.println( str.compareTo("abcd") );  // 0 (같은 경우는 숫자나 문자나 0을 리턴)
  System.out.println( str.compareTo("ab") );  //  2
  System.out.println( str.compareTo("a") );  //  3
  System.out.println( str.compareTo("c") );  //  -2
  System.out.println( "".compareTo(str) );  //  -4

  // 2) 비교대상과 전혀 다른 문자열인 경우
  System.out.println( str.compareTo("zefd") );  //  -25
  System.out.println( str.compareTo("zEFd") );  //  -25
  System.out.println( str.compareTo("ABCD") );  //  32
- str.compareTo("ab"), str.compareTo("a")

: 기준값의 앞자리부터 일치하는 문자열이 포함된 경우 (기준문자열길이-비교대상문자열길이) 리턴
ex) "abcd"(4) - "ab"(2) = 2 반환 / "abcd"(4) - "a"(1) = 1 반환

- str.compareTo("c")

: 기준값의 앞자리부터 다르기 때문에 아스키 코드값의 차이값을 리턴
 * compareTo는 같은 위치의 문자를 비교한다.

예제에서는 첫번째 위치에서 비교가 실패했기 때문에 "a"와 "c"의 차이값을 리턴한다. (a=97,c=99 / a-c=-2)

ex) "abcd".compareTo("abfd") -> "ab" 까지 동일하므로 "c", "f" 아스키코드 차이를 리턴한다.



2) 비교대상과 전혀 다른 문자열인 경우
- str.compareTo("zefd")

: 위와 같은 논리로 첫 문자부터 다르므로 "a"와 "z"의 아스키코드 차이값 리턴

- str.compareTo("ABCD")

: "a"와 "A"의 아스키코드 차이값 리턴

* 대소문자구분 무시하고 비교하고 싶은 경우 compareToIgnorecase() 사용
