230210

팩토리얼(Factorial) => 3! = 3*2*1

[문제] 임의의 수(양의 정수)를 입력받아 입력 받은 수에 대한 팩토리얼을 구하시오(단, 반복문 사용)

<입력>
숫자 입력 => 4
<출력>
4! = 24

반복문으로 작성 후 재귀함수로 다시 작성한 코드
관련 파일 : SortEx01.java
-----------------------------------------------------------------------------

[문제2] 피보나치 수열을 구해서 출력하는 프로그램을 작성하시오.
<처리조건>
임의의 수를 입력하면 입력한 수만큼의 피보나치 수열을 구해서 출력한다.

<입력>
숫자 입력 => 5
<출력>
1 1 2 3 5

반복문으로 작성 후 재귀함수로 다시 작성한 코드
관련 파일 : FibonacciRecursive.java
-----------------------------------------------------------------------------

재귀(Recursive) 함수

실행속도는 반복문이 훨씬 빠름
스택은 운영체제가 관여해서 관리하기 때문

재귀구조가 메모리도 많이 사용함

반복문으로 구현할 수 없는것을, 힘든것을 재귀 구조로 가능하기 때문. 장점이 이거 딱 하나.
-----------------------------------------------------------------------------

230213

정렬 예제
관련 파일 : Ex11_1~4, sawon과 ArrayListSawon 은 선택정렬 활용 예제(출력 부분만 이름 정렬 관련으로 활용)

String 객체 비교할때 정렬하고싶다면
compareTo()
compareToIngnoreCase() : 대소문자 구분하지 않고 비교

- int compareTo(NumberSubClass referenceName)
- int compareTo(String anotherString)
- compareTo() 함수는 두개의 값을 비교하여 int 값으로 반환해주는 함수이다.
compareTo() 함수에는 위에서 설명하는바와 같이 "문자열의 비교" 와 "숫자의 비교" 두 방식이 존재한다.

1. 숫자 비교
숫자의 비교 같은 경우는 단순히 크다(1), 같다(0), 작다(-1) 의 관한 결과값을 리턴해주는 반면
문자열의 비교 같은 경우는 같다(0), 그 외 양수/음수값 같이 참 재미난 결과를 반환해준다.

기준 값과 비교대상이 동일한 값일 경우 0
기준 값이 비교대상 보다 작은 경우 -1
기준 값이 비교대상 보다 큰 경우 1
예제를 보면 타입을 Integer로 선언해 주었는데, 만약 int타입을 가지고 비교하고자 한다면 다음과 같이 사용하면 된다.

int x = 4;
int y = 5;
Integer.compare(x,y);
이런식으로 Integer.compare 메서드를 사용해주면 int타입을 가지고 비교할 수 있다.

2. 문자 비교
같으면 0 반환
다르면 다른 문자의 갯수만큼 리턴

1) 비교대상 문자열이 포함되어있을 경우 (비교대상문자열이 기준문자열에 완전히 포함되는 문자열이어야 함)
str.compareTo("abcd")

: 문자열이 일치하는 경우 숫자비교와 똑같이 0 리턴


String str = "abcd";

  // 1) 비교대상에 문자열이 포함되어있을 경우
  System.out.println( str.compareTo("abcd") );  // 0 (같은 경우는 숫자나 문자나 0을 리턴)
  System.out.println( str.compareTo("ab") );  //  2
  System.out.println( str.compareTo("a") );  //  3
  System.out.println( str.compareTo("c") );  //  -2
  System.out.println( "".compareTo(str) );  //  -4

  // 2) 비교대상과 전혀 다른 문자열인 경우
  System.out.println( str.compareTo("zefd") );  //  -25
  System.out.println( str.compareTo("zEFd") );  //  -25
  System.out.println( str.compareTo("ABCD") );  //  32
- str.compareTo("ab"), str.compareTo("a")

: 기준값의 앞자리부터 일치하는 문자열이 포함된 경우 (기준문자열길이-비교대상문자열길이) 리턴
ex) "abcd"(4) - "ab"(2) = 2 반환 / "abcd"(4) - "a"(1) = 1 반환

- str.compareTo("c")

: 기준값의 앞자리부터 다르기 때문에 아스키 코드값의 차이값을 리턴
 * compareTo는 같은 위치의 문자를 비교한다.

예제에서는 첫번째 위치에서 비교가 실패했기 때문에 "a"와 "c"의 차이값을 리턴한다. (a=97,c=99 / a-c=-2)

ex) "abcd".compareTo("abfd") -> "ab" 까지 동일하므로 "c", "f" 아스키코드 차이를 리턴한다.



2) 비교대상과 전혀 다른 문자열인 경우
- str.compareTo("zefd")

: 위와 같은 논리로 첫 문자부터 다르므로 "a"와 "z"의 아스키코드 차이값 리턴

- str.compareTo("ABCD")

: "a"와 "A"의 아스키코드 차이값 리턴

* 대소문자구분 무시하고 비교하고 싶은 경우 compareToIgnorecase() 사용
-----------------------------------------------------------------------------
셸 정렬(shell sort)
  일정한 간격(interval)으로 떨어져있는 자료들끼리 부분집합을 구성하고
  각 부분집합에 있는 원소들에 대해서 삽입 정렬을 수행하는
  작업을 반복하면서 전체 원소들을 정렬하는 방법(삽입 정렬의 장점을 살리고 성능 개선)
  삽입 정렬 O(n^2) 과 시간 복잡도를 비교해 보면 성능이 더 좋다. O(n^1.25)

전체 원소에 대해서 삽입 정렬을 수행하는 것보다 부분집합으로 나누어
정렬하게 되면 비교연산과 교환연산 감소

셸 정렬의 부분집합
• 부분집합의 기준이 되는 간격을 매개변수 h에 저장
• 한 단계가 수행될 때마다 h의 값을 감소시키고 셸 정렬을 순환 호출
    h가 1이 될 때까지 반복
셸 정렬의 성능은 매개변수 h의 값에 따라 달라진다.
• 정렬할 자료의 특성에 따라 매개변수 생성 함수를 사용
• 일반적으로 사용하는 h의 값은 원소 개수의 1/2을 사용하고 한 단계
    수행될 때마다 h의 값을 반으로 감소시키면서 반복 수행

관련 파일 : ex11_5_shell.java  ex11_5_shellAnother.java
-----------------------------------------------------------------------------
병합 정렬(merge sort)

230214
스택에 쌓는 재귀적 방법이 큰 그림은 이해가 가지만 구체적인 구현을 따라가다 보면 놓치는 부분들이 있어
반복학습할 예정


여러 개의 정렬된 자료의 집합을 병합하여 한 개의 정렬된 집합으로
만드는 방법

부분집합으로 분할(divide)하고, 각 부분집합에 대해서 정렬 작업을 완성(conquer)한 후에 정렬된 부분집합들을 다시 결합
(combine)하는 분할 정복(divide and conquer) 기법 사용
  병합 정렬 방법의 종류
• 2-way 병합 : 2개의 정렬된 자료의 집합을 결합하여 하나의 집합으로 만드는 병합 방법
• n-way 병합 : n개의 정렬된 자료의 집합을 결합하여 하나의 집합으로 만드는 병합 방법

2-way 병합 정렬 : 세 가지 기본 작업을 반복 수행하면서 완성
⑴ 분할(divide) : 입력 자료를 같은 크기의 부분집합 2개로 분할한다.
⑵ 정복(conquer) : 부분집합의 원소들을 정렬한다. 부분집합의 크기가 충분히 작지 않으면
                  순환호출을 이용하여 다시 분할 정복 기법을 적용한다.
⑶ 결합(combine) : 정렬된 부분집합들을 하나의 집합으로 통합한다

관련 파일 : ex11_6_merge.java, merge_sort_stack.png
-----------------------------------------------------------------------------

merge sort 관련 ChatGPT가 제안한 방법

1. 재귀 호출을 사용하는 다른 방법으로는 중간 지점을 기준으로 하위 배열을 분할하는 대신,
먼저 하위 배열을 모두 생성한 후에 하위 배열을 병합하는 방법이 있습니다.
이 방법은 하위 배열을 재귀 호출하는 대신,
반복문을 사용하여 생성하므로 스택 오버플로우가 발생할 가능성이 줄어듭니다.

public static void mergeSort(int[] arr) {
    int[] tmp = new int[arr.length];
    int[] src = arr;
    int[] dst = tmp;
    for (int size = 1; size < arr.length; size *= 2) {
        for (int left = 0; left < arr.length; left += size * 2) {
            int mid = Math.min(left + size, arr.length);
            int right = Math.min(left + size * 2, arr.length);
            merge(src, dst, left, mid, right);
        }
        int[] tmp2 = src;
        src = dst;
        dst = tmp2;
    }
    if (src != arr) {
        System.arraycopy(src, 0, arr, 0, arr.length);
    }
}

private static void merge(int[] src, int[] dst, int left, int mid, int right) {
    int i = left;
    int j = mid;
    for (int k = left; k < right; k++) {
        if (i < mid && (j >= right || src[i] <= src[j])) {
            dst[k] = src[i++];
        } else {
            dst[k] = src[j++];
        }
    }
}

위 코드에서 mergeSort 메소드는 먼저 하위 배열을 모두 생성한 후,
merge 메소드를 이용해 두 개의 하위 배열을 병합합니다.
merge 메소드에서는 두 개의 정렬된 하위 배열을 병합하여 하나의 정렬된 배열을 만듭니다.

위의 예시에서는 두 개의 배열(src와 dst)을 번갈아가며 사용하여, 하위 배열을 생성하고 병합합니다.
이 방법은 재귀 호출을 사용하지만, 스택 오버플로우가 발생할 가능성이 낮은 장점이 있습니다.
-----------------------------------------------------------------------------

2. 병합 정렬은 여러 방법으로 구현할 수 있습니다.
다음은 재귀적으로 호출하는 대신 반복문을 사용하여 구현한 병합 정렬 예시입니다.

public static void mergeSort(int[] arr) {
    int[] tmp = new int[arr.length];
    for (int size = 1; size < arr.length; size *= 2) {
        for (int left = 0; left < arr.length - size; left += size * 2) {
            int mid = left + size - 1;
            int right = Math.min(left + size * 2 - 1, arr.length - 1);
            merge(arr, tmp, left, mid, right);
        }
    }
}

private static void merge(int[] arr, int[] tmp, int left, int mid, int right) {
    System.arraycopy(arr, left, tmp, left, right - left + 1);
    int i = left;
    int j = mid + 1;
    for (int k = left; k <= right; k++) {
        if (i > mid) {
            arr[k] = tmp[j++];
        } else if (j > right) {
            arr[k] = tmp[i++];
        } else if (tmp[j] < tmp[i]) {
            arr[k] = tmp[j++];
        } else {
            arr[k] = tmp[i++];
        }
    }
}

위 코드에서 mergeSort 메소드는 배열을 반으로 나누고, merge 메소드를 이용해 두 개의 하위 배열을 병합합니다.
merge 메소드에서는 두 개의 정렬된 하위 배열을 병합하여 하나의 정렬된 배열을 만듭니다.

위의 예시에서는 임시 배열을 이용하여 정렬된 하위 배열을 병합합니다.
이 방법은 재귀 호출을 사용하지 않기 때문에 메모리 사용량이 감소하며,
재귀 호출로 인한 오버헤드도 없어서 일반적으로 더 빠르게 동작합니다.
