#230209
##Queue 알고리즘

###선형 Queue
1차원 배열을 이용한 Queue

• Queue의 크기 = 배열의 크기
• 변수 front : 저장된 첫 번째 원소의 인덱스 저장
• 변수 rear : 저장된 마지막 원소의 인덱스 저장

  상태 표현
• 초기 상태 : front = rear = -1
• 공백 상태 : front = rear
• 포화 상태 : rear = n-1 (n : 배열의 크기, n-1 : 배열의 마지막 인덱스)

관련 파일 : Ex8_queue.java

선형 큐의 잘못된 포화상태 인식

큐에서 삽입과 삭제를 반복하면서 아래와 같은 상태일 경우, 앞부분에 빈
자리가 있지만 rear=n-1 상태이므로 포화상태로 인식하고 더 이상의 삽
입을 수행하지 않는다.

선형 큐의 잘못된 포화상태 인식의 해결 방법-1
저장된 원소들을 배열의 앞부분으로 이동시키기
순차자료에서의 이동 작업은 연산이 복잡하여 효율성이 떨어짐

선형 큐의 잘못된 포화상태 인식의 해결 방법-2
1차원 배열을 사용하면서 논리적으로 배열의 처음과 끝이 연결되어 있다
고 가정하고 사용 ==> 원형 큐
-----------------------------------------------------------------------------

###원형 Queue
• 초기 공백 상태 : front = rear = 0
• front와 rear의 위치가 배열의 마지막 인덱스 n-1에서 논리적인 다음자리
인 인덱스 0번으로 이동하기 위해서 나머지연산자 mod를 사용
3 ÷ 4 = 0 …3 (몫=0, 나머지=3)
3 mod 4 = 3
• 공백 상태와 포화 상태 구분을 쉽게 하기 위해서 front가 있는 자리는 사
용하지 않고 항상 빈자리로 둔다.

관련 파일 : Ex9_CircleQueue.java
-----------------------------------------------------------------------------

###연결 큐
  단순 연결 리스트를 이용한 큐
• 큐의 원소 : 단순 연결 리스트의 노드
• 큐의 원소의 순서 : 노드의 링크 포인터로 연결
• 변수 front : 첫 번째 노드를 가리키는 포인터 변수
• 변수 rear : 마지막 노드를 가리키는 포인터 변수
  상태 표현
• 초기 상태와 공백 상태 : front = rear = null

관련 파일 : Ex8_LinkedQueue.java

-----------------------------------------------------------------------------
###이중 연결 큐

숙제
단순연결리스트에서 더블 링크드 리스트로 만들어보라

기존 Ex8_LinkedQueue 에서
class NewNode 에서 NewNode rlink 필드롤 추가후 메소드들을 다듬어서 구현

관련 파일 : EX8_DoubleLinkedQueue.java
